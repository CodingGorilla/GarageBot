// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Service.Core;
//
//    var twitchTeam = TwitchTeam.FromJson(jsonString);

namespace Service.Core
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TwitchTeam
    {
        [JsonProperty("_id")]
        public long Id { get; set; }

        [JsonProperty("background")]
        public object Background { get; set; }

        [JsonProperty("banner")]
        public Uri Banner { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        [JsonProperty("info")]
        public string Info { get; set; }

        [JsonProperty("logo")]
        public Uri Logo { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonProperty("users")]
        public TwitchUser[] Users { get; set; }
    }    

    public partial class TwitchTeam
    {
        public static TwitchTeam FromJson(string json) => JsonConvert.DeserializeObject<TwitchTeam>(json, Service.Core.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TwitchTeam self) => JsonConvert.SerializeObject(self, Service.Core.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
